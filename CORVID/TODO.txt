DONE Rework CORVID_SCREEN in CORVID_WORLD
DONE MiniScreen
DONE Create methods to allow for selection, deletion, and modification of objects in the ingame UI
DONE Add textures that can be used to create larger and arbitrarily sized rectangles
DONE Add the player Sprite
DONE Add physics
DONE Fix the templates; probably make it so all screenobjects use float templates
DONE What I was doing: Reconfiguring the Texture Class to use a single static texture list

TODO Rework the CORVID_WORLD system of classes to create 
	 1- a framework allowing for screens player to move from screen to screen,
	 2- allowing automatic object loading and unloading
	 3- simplified file data storage, with each level (or other nomenclature) having its own corresponding folder
	 4- Creation of multiple levels with corresponding names
	 5- Default World including ground upon loading blank level
	 6- Record player position in each world as a part of level(or other nomenclature) data

TODO Clamp Framerate Such that
	 1- Game with physics simulation runs at constant 60 fps
	 2- Screen is syncronized with the gameplay at one to one rate such that
	 3- When performance is at above 60 fps, there are no framedips, and no frames are rendered twice unnecessarily
	 4- When performance is below 60 fps (this may happen on slower computers), lag makes the speed of the games physics engine run slower, rather than risk increased speed per frame allowing risk of clipping

TODO Collision Detection Fixes
	 1- Rework collision detection to optimize hexagonal trajectory to prevent full object clipping
	 2- Player cannot move from block to another at same height

TODO Text Renderer

TODO Have Camera Match player speed to avoid stuttering effect as it speeds and slows

TODO Player Movement Features
	 1- Duck Button
	 2- Sprint
	 3- Kick

TODO Clarity and Efficiency
	 1- Keep track of and remove memory leaks
	 2- Keep track of simulation framerate. As of writing this, the simulation runs at 4000 fps unclamped on a very simple world with just player, ~15 simple brick objects and png backgrounds and textures.
	 While it's physically impossible to keep that rate when I build more complicated levels, I want it to stay consistently above the 60 fps needed for syncronicity with a normal screen.
	 3- If I recall correctly, the collsion detection algorithm runs at ~O(D! * S + B), Where D == Dynamic Objects, S == Static Objects, and B = Background Objects. The speed of this hasn't
	 come up yet, since I haven't even added ways to add multiple Dynamic Objects, but when I get to the point of adding it, I should be able to make it so that it runs at close to O(D^2 * S + B),
	 which should reduce improve speed for more than 1 dynamic object. If performance continues to become an issue, I may be able to get the D term to DlogD using advanced data structures.

TODO Seperating Documentation into its own issue
DONE 1- CONSTS.h
DONE 2- EVENT.h
DONE 3- FILE.h
DONE 4- GEOM.h
DONE 5- SPRITES.h
DONE 6- TEXT.h
DONE 7- TEXTURE.h
DONE 8- WINDOW.h
	 9- WORLD.h
	 10- EVENT.cpp
	 11- FILE.cpp
	 12- GEOM.cpp
	 13- SPRITES.cpp
	 14- TEXTURE.cpp
	 15- WORLD.cpp
	 16- main.cpp

TODO Clean up Resource Files

TODO Fix the Warnings about datatype conversion

DONE Merge the CORVID_COORDS class back into CORVID_GEOM

TODO The Miniscreen
	 1- Make Miniscreen Toggleable
	 2- Left side of screen is bled into when the camera scrolls
	 3- ObjectCreation should display correct offset for unselected object, and when object is placed

TODO Make Executable
	 1- Make it
	 2- Make it work on other computers